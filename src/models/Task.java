package models;

/**
 * Represents a computational task generated by an IoT device
 * that needs to be offloaded to edge or cloud resources
 */
public class Task {
    private String taskId;
    private int sourceDeviceId;
    private double cpuDemand;        // in Million Instructions (MI)
    private double networkDemand;    // in KB (data size to transfer)
    private double delaySensitivity; // between 0 and 1 (1 being most sensitive)
    private long creationTime;       // timestamp when task was created
    private long startTime;          // timestamp when task execution started
    private long completionTime;     // timestamp when task execution completed
    private String executionLocation; // LOCAL_EDGE, OTHER_EDGE, or CLOUD
    private TaskStatus status;
    
    public enum TaskStatus {
        CREATED,
        QUEUED,
        TRANSFERRING,
        EXECUTING,
        COMPLETED,
        FAILED
    }
    
    public Task(String taskId, int sourceDeviceId, double cpuDemand, 
                double networkDemand, double delaySensitivity, long creationTime) {
        this.taskId = taskId;
        this.sourceDeviceId = sourceDeviceId;
        this.cpuDemand = cpuDemand;
        this.networkDemand = networkDemand;
        this.delaySensitivity = delaySensitivity;
        this.creationTime = creationTime;
        this.status = TaskStatus.CREATED;
    }
    
    /**
     * Calculate the estimated execution time based on the available MIPS
     * @param mips Million Instructions Per Second of the executing resource
     * @return Estimated execution time in milliseconds
     */
    public double calculateExecutionTime(double mips) {
        return (cpuDemand / mips) * 1000; // Convert to milliseconds
    }
    
    /**
     * Calculate the estimated data transfer time based on available bandwidth
     * @param bandwidth Available bandwidth in Mbps
     * @return Estimated transfer time in milliseconds
     */
    public double calculateTransferTime(double bandwidth) {
        // Convert KB to Mb and bandwidth from Mbps to KBps
        double transferSize = networkDemand;
        double bandwidthKBps = bandwidth * 125; // 1 Mbps = 125 KBps
        return (transferSize / bandwidthKBps) * 1000; // Convert to milliseconds
    }
    
    /**
     * Calculate the total service time (transfer + execution)
     * @param bandwidth Available bandwidth in Mbps
     * @param mips Million Instructions Per Second of the executing resource
     * @return Total service time in milliseconds
     */
    public double calculateServiceTime(double bandwidth, double mips) {
        return calculateTransferTime(bandwidth) + calculateExecutionTime(mips);
    }
    
    /**
     * Mark the task as started
     */
    public void markStarted() {
        this.startTime = System.currentTimeMillis();
        this.status = TaskStatus.EXECUTING;
    }
    
    /**
     * Mark the task as completed
     */
    public void markCompleted() {
        this.completionTime = System.currentTimeMillis();
        this.status = TaskStatus.COMPLETED;
    }
    
    /**
     * Calculate the actual service time based on timestamps
     * @return Actual service time in milliseconds
     */
    public long getActualServiceTime() {
        if (status != TaskStatus.COMPLETED) {
            return -1; // Task not completed yet
        }
        return completionTime - creationTime;
    }
    
    /**
     * Calculate the actual execution time based on timestamps
     * @return Actual execution time in milliseconds
     */
    public long getActualExecutionTime() {
        if (status != TaskStatus.COMPLETED) {
            return -1; // Task not completed yet
        }
        return completionTime - startTime;
    }
    
    // Getters and setters
    public String getTaskId() {
        return taskId;
    }
    
    public int getSourceDeviceId() {
        return sourceDeviceId;
    }
    
    public double getCpuDemand() {
        return cpuDemand;
    }
    
    public double getNetworkDemand() {
        return networkDemand;
    }
    
    public double getDelaySensitivity() {
        return delaySensitivity;
    }
    
    public long getCreationTime() {
        return creationTime;
    }
    
    public TaskStatus getStatus() {
        return status;
    }
    
    public void setStatus(TaskStatus status) {
        this.status = status;
    }
    
    public String getExecutionLocation() {
        return executionLocation;
    }
    
    public void setExecutionLocation(String executionLocation) {
        this.executionLocation = executionLocation;
    }
    
    @Override
    public String toString() {
        return "Task{" +
                "taskId='" + taskId + '\'' +
                ", cpuDemand=" + cpuDemand +
                ", networkDemand=" + networkDemand +
                ", delaySensitivity=" + delaySensitivity +
                ", status=" + status +
                ", executionLocation='" + executionLocation + '\'' +
                '}';
    }
}
